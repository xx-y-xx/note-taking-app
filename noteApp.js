const MOCK_NOTES = [
    {
        id: 1,
        title: '–†–∞–±–æ—Ç–∞ —Å —Ñ–æ—Ä–º–∞–º–∏',
        content: '–ö –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–º –ø–æ–ª—è–º —Ñ–æ—Ä–º—ã –º–æ–∂–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ form.elements –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é, —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –≤ –∞—Ç—Ä–∏–±—É—Ç–µ name',
        color: 'green',
        isFavorite: false,
    },
    {
        id: 2,
        title: '–§–ª–µ–∫—Å –§–ª–µ–∫—Å',
        content: '–ö –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–º –ø–æ–ª—è–º —Ñ–æ—Ä–º—ã –º–æ–∂–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ form.elements –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é, —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –≤ –∞—Ç—Ä–∏–±—É—Ç–µ name',
        color: 'purple',
        isFavorite: true,
    },
    // ...
]

const DICTIONARY_COLORS = {
    green: `var(--note-color-green)`,
    blue: `var(--note-color-blue)`,
    red: `var(--note-color-red)`,
    yellow: `var(--note-color-yellow)`,
    purple: `var(--note-color-purple)`,
    error: `var(--message-color-error)`,
    success: `var(--message-color-success)`,
}

const model = {

    notes: [],
//üî∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    saveStorageNotes() { //—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –∫—ç—à–∏
        localStorage.setItem('notesStorage', JSON.stringify(this.notes))
    },
    launchLocalStorage() { // –ø–æ—Ç–æ–º –º–æ–∂–Ω–æ –∑–∞—Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ —Ç–µ—Ä–Ω–∞–ª—å–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä
        const DataStorage = localStorage.getItem('notesStorage')
        if (DataStorage) {
            this.notes = JSON.parse(DataStorage)
        } else {
            // this.notes = []
            this.notes = [...MOCK_NOTES]
            // this.saveStorageNotes() // —Å–ø–æ—Ä–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç
        }
    },
    updateCentral(callbackFunction) {//—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è + –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        callbackFunction(this.notes)        
        this.saveStorageNotes()
    },    
    findNoteByID(noteFind) {
        return this.notes.find(n => n.id === noteFind)},

//üî∏ —Ä–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
    addNote(title, content, color) {
        this.updateCentral(notesArray => {
            const newNote = {
                id: Math.random(),
                title,
                content,
                color,
                isFavorite: false
            }
            notesArray.unshift(newNote)
        })        
    },
    deleteNote(noteId) {
           this.updateCentral(notesArray =>{
            const deleteIndex = this.findNoteByID(noteId)
            if (deleteIndex) {
              const deleteNoteIndex = notesArray.indexOf(deleteIndex)
              notesArray.splice(deleteNoteIndex,1)
            }
           })
    },
    noteToggleFavorite(noteID) {
        this.updateCentral(notesArray => {//–∑—Ä—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–ªüò±, —Ç–µ–ø–µ—Ä—å —è –Ω–µ –º–æ–≥—É –æ–±—Ä–∞—Ç–∏—Ç—Å—è –∫ notesArray –∏ —Ä–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ this.notes
           const toggleNote = this.findNoteByID(noteID)//üò±—á–µ—Ä–µ–∑ find –±—ã–ª–æ –±—ã –Ω–∞–¥—ë–∂–Ω–µ–µ 
           if (toggleNote) toggleNote.isFavorite = !toggleNote.isFavorite
        })
     },
    listFavorite() {
            return this.notes.filter((favoriteNote) => favoriteNote.isFavorite === true)
        }    
}

// üîπ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
const view = {
    init() {
        controller.launchLocalStorage()

        this.renderNotes(model.notes)
        this.renderNotesCount(model.notes.length) // —Å—Ä–∞–∑—É –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–º–µ—Ç–æ–∫

        const form = document.querySelector('.note-form')
        const title = document.querySelector('.input-title')// –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π ?
        const content = document.querySelector('.input-text')// –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π ?

        const noteList = document.querySelector('.notes-list')
        const checkboxFavoriteToRender = document.querySelector('.checkboxFavorite')


        form.addEventListener('submit', (event) => {
            event.preventDefault()
            const titleValue = document.querySelector('.input-title').value
            const contentValue = content.value
            const color = document.querySelector('input[name="color"]:checked').value
            //–≤–∞–ª–∏–¥–∞—Ü–∏—è
            if (titleValue.length === 0) {
                this.showMessage('–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–º–µ—Ç–∫–∏ –ø—É—Å—Ç–æ–π', 'error')
                return
            }

            if (contentValue.length === 0) {
                this.showMessage('–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–º–µ—Ç–∫–∏ –ø—É—Å—Ç–æ', 'error')
                return
            }

            if (titleValue.length > 50) {
                this.showMessage('–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –±–æ–ª–µ–µ 50 —Å–∏–º–≤–æ–ª–æ–≤', 'error')
                return
            }

            if (contentValue.length > 300) {
                this.showMessage('–î–ª–∏–Ω–∞ –∑–∞–º–µ—Ç–∫–∏ –±–æ–ª–µ–µ 300 —Å–∏–º–≤–æ–ª–æ–≤', 'error')
                return//—Ç.–∫ –≤ addEventListener –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç—Ä–µ–ª–æ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, —Ç–æ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å this
            }
            controller.addNote(titleValue, contentValue, color)

            title.value = ''
            content.value = ''
        });

        noteList.addEventListener('click', function (event) {
            if (event.target.classList.contains('delete-button')) {
                const noteID = Number(event.target.closest('li').id)
                controller.deleteNote(noteID)
            }
            if (event.target.classList.contains('favorite-icon')) {
                const noteID = Number(event.target.closest('li').id)
                controller.noteToggleFavorite(noteID)
            }
        });

        checkboxFavoriteToRender.addEventListener('change', (event) => { //üîπ–æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã change —Å input
            controller.isCheckboxFavirite(event.target.checked)//üîπchange –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±—É–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–∏–∏ input —Ç–∏–ø–∞ checkbox
        });

    },

    renderNotes(notes) {
        const emptyMessage = document.querySelector('.messages-box')//–∫–æ—Å—Ç—ã–ª—å –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ –ø—É—Å—Ç—ã—Ö –∑–∞–º–µ—Ç–∫–∞—Ö
        const list = document.querySelector('.notes-list')// —Ñ–∞—Ä—à–∏—Ä—É—é —ç—Ç–æ—Ç —Ç–µ–≥ –∑–∞–º–µ—Ç–∫–∞–º–∏

        if (!model.notes.length) {
            emptyMessage.textContent = '–£ –≤–∞—Å –Ω–µ—Ç –µ—â—ë –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª—è –≤—ã—à–µ'

            list.innerHTML = ''
        } else {
            emptyMessage.textContent = ''//—É–¥–∞–ª—è—é —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è

            let notesHTML = ''

            notes.forEach(el => {
                notesHTML += `
        <li id="${el.id}" class="${el.isFavorite ? 'favorite' : ''}">

        <div class="note-header" style="background-color: ${DICTIONARY_COLORS[el.color]}">
        <b class="note-title">${el.title}</b>
        <img class="favorite-icon" src="${el.isFavorite ? 'assets/images/heart-active.svg' : 'assets/images/heart-inactive.svg'}" />
        <button class="delete-button" type="button">–£–¥–∞–ª–∏—Ç—å üóë</button>
        </div>  
          
          <p class="note-conten">${el.content}</p> 
          
        </li>      `

            })

            list.innerHTML = notesHTML
        }
    },
    renderNotesCount(count) {
        const currentCount = document.querySelector('.count')
        currentCount.textContent = count
    },
    showMessage(msg, type = 'success') {
        const itemMessage = document.createElement('div')
        itemMessage.className = type === 'error' ? 'message-error' : 'message-success'
        itemMessage.textContent = msg

        document.querySelector('.messages-box').append(itemMessage)

        setTimeout(() => { itemMessage.remove() }, 3000)
    }
}
//üîπ
const controller = {
    deleteNote(noteID) {
        model.deleteNote(noteID)

        view.renderNotes(model.notes)
        view.renderNotesCount(model.notes.length)
        view.showMessage('–ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞')
    },
    addNote(title, content, color) {
        model.addNote(title, content, color)        

        view.renderNotes(model.notes)
        view.renderNotesCount(model.notes.length)
        view.showMessage('–ó–∞–º–µ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞')
    },
    noteToggleFavorite(noteID) {
        model.noteToggleFavorite(noteID)
        view.renderNotes(model.notes)
    },
    isCheckboxFavirite(isFavorite) {
        if (isFavorite) {
            model.listFavorite()//—è –Ω–∞–ø—Ä—è–º—É—é –æ–±—Ä–∞—â–∞—é—Å—å –≤ model –∏ —Ç–∞–º –º—É—Ç–∏—Ä—É—é –º–∞—Å—Å–∏–≤
            view.renderNotes(model.listFavorite())
        } else {
            view.renderNotes(model.notes)
        }
    },
    launchLocalStorage() {
    model.launchLocalStorage()
    }
}

function init() {
    view.init()
}
document.addEventListener('DOMContentLoaded', init);