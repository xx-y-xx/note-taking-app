const MOCK_NOTES = [
    {
        id: 1,
        title: '–†–∞–±–æ—Ç–∞ —Å —Ñ–æ—Ä–º–∞–º–∏',
        content: '–ö –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–º –ø–æ–ª—è–º —Ñ–æ—Ä–º—ã –º–æ–∂–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ form.elements –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é, —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –≤ –∞—Ç—Ä–∏–±—É—Ç–µ name',
        color: 'green',
        isFavorite: false,
    },
    {
        id: 2,
        title: '–§–ª–µ–∫—Å –§–ª–µ–∫—Å',
        content: '–ö –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–º –ø–æ–ª—è–º —Ñ–æ—Ä–º—ã –º–æ–∂–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ form.elements –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é, —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –≤ –∞—Ç—Ä–∏–±—É—Ç–µ name',
        color: 'purple',
        isFavorite: false,
    },
    // ...
]

const DICTIONARY_COLORS = { 
    green: `var(--note-color-green)`,
    blue: `var(--note-color-blue)`,
    red: `var(--note-color-red)`,
    yellow: `var(--note-color-yellow)`,
    purple: `var(--note-color-purple)`,
    error: `var(--message-color-error)`,
    success: `var(--message-color-success)`,    
}

//–º–æ–¥–µ–ª—å –∏ —Ä–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
const model = {
    notes: MOCK_NOTES, // notes: [],
    // notes: [],
    addNote(title, content, color) {

        const newNote = { id: Math.random(), title: title, content : content, color, isFavorite: false }

        this.notes.unshift(newNote)
    },

    deleteNote(noteId) {
        this.notes = this.notes.filter((n) => {
            return n.id !== noteId
        })
    },
}

// üîπ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
const view = {
    init() {
        this.renderNotes(model.notes)
        this.renderNotesCount(model.notes.length) // —Å—Ä–∞–∑—É –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–º–µ—Ç–æ–∫

        const form = document.querySelector('.note-form')
        const title = document.querySelector('.input-title')
        const content = document.querySelector('.input-text')

        const noteList = document.querySelector('.notes-list')


        form.addEventListener('submit', (event) => {
            event.preventDefault()
            const titleValue = document.querySelector('.input-title').value
            const contentValue = content.value            
            const color = document.querySelector('input[name="color"]:checked').value
            controller.addNote(titleValue, contentValue, color)

            title.value = ''
            content.value = ''
        });


        noteList.addEventListener('click', function (event) {
            if (event.target.classList.contains('delete-button')) {
                const noteID = Number(event.target.closest('li').id)
                controller.deleteNote(noteID)
            }
        });

    },
   
    renderNotes(notes) {
        const list = document.querySelector('.notes-list')
        // –Ω–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∑–∞–º–µ—Ç–æ–∫ –∏ —Ä–µ–Ω–¥–µ—Ä–∏–º –∑–∞–º–µ—Ç–∫–∏ –≤ –Ω–µ–≥–æ (–µ—Å–ª–∏ –∑–∞–º–µ—Ç–æ–∫ –Ω–µ—Ç, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–µ–∫—Å—Ç)
        let notesHTML = ''

        notes.forEach(el => {
            notesHTML += `
        <li id="${el.id}" class="${el.isFavorite ? 'favorite' : ''}">

        <div class="note-header" style="background-color: ${DICTIONARY_COLORS[el.color]}">
        <b class="note-title">${el.title}</b>
        <button class="delete-button" type="button">–£–¥–∞–ª–∏—Ç—å üóë</button>
        </div>  
          
          <p class="note-conten">${el.content}</p> 
          
        </li>      `
            
        })

        list.innerHTML = notesHTML
        // —Ç–∞–∫–∂–µ –∑–¥–µ—Å—å –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–≤–µ—Å–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–æ–≤ –Ω–∞ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ

    },
    renderNotesCount(count) {
        const currentCount = document.querySelector('.count')
        currentCount.textContent = count
    },
    showMessage(msg) {
        // –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
    }

}
const controller = {
    deleteNote(noteID) {
        model.deleteNote(noteID)
        view.renderNotes(model.notes)
        view.renderNotesCount(model.notes.length)
        view.showMessage('–ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞')
    },
    addNote(title, content, color) {
        // –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø–æ–ª–µ–π

        model.addNote(title, content, color)

        view.renderNotes(model.notes)
        view.renderNotesCount(model.notes.length)
        view.showMessage('–ó–∞–º–µ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞')
    },
}

function init() {
    view.init()
}
init() 